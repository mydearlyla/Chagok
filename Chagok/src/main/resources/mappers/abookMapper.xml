<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.chagok.mapper.abookMapper">
  
  <!-- 가계부 목록 -->
  <select id="getAbookList" resultType="AbookVO" parameterType="map">
       select * from account_book as ab inner join category as c on ab.ctno=c.ctno
		where ab.mno=#{mno}
		and ab.ab_date between last_day(now() - interval #{mm}+1 month) + interval 1 day 
		and last_day(now() - interval #{mm} month)
  </select>
  
    <select id="getAbookList2" resultType="AbookVO" parameterType="map">
 	select * from account_book as ab inner join category as c on ab.ctno=c.ctno where mno=#{mno};
 	 </select>
  
  <!-- 카테고리 top -->
  <select id="cttopList" resultType="map">
	select ctno, ct_top
	from category
	where ct_lev=0
  </select>
  
  <!-- 카테고리 bottom -->
    <select id="ctbottomList" resultType="map" parameterType="string">
	select ctno, ct_bottom
	from category
	where ct_top=#{ct_top} and ct_lev=1
  	</select>
  	
  	
  	  <!-- 카테고리 bottom -->
    <select id="ctbottomList2" resultType="map" parameterType="string">
	select ctno, ct_bottom
	from category
	where ct_top="건강/운동" and ct_lev=1
  	</select>
  
  	
  	
  	
  	
  
  <!-- 가계부 저장(수정) -->
    <update id="setAbookList">
	update account_book set 
	ab_inout=#{ab_inout},ab_date=#{ab_date},ab_content=#{ab_content},ab_method=#{ab_method},ab_memo=#{ab_memo},ctno=#{ctno}, ab_amount=#{ab_amount}
	where abno=#{abno}
	</update>
  
  <!-- 가계부 삭제 -->
  <delete id="delAbookList">
  	delete from account_book where abno=#{abno}
  </delete> 
  
  <!-- 가계부 적기 -->
  <insert id="insAbookList" parameterType="AbookVO">
  insert into account_book(mno, ctno, ab_inout, ab_amount, ab_date, ab_content, ab_method, ab_memo)
  values(#{mno}, #{ctno}, #{ab_inout}, #{ab_amount}, #{ab_date}, #{ab_content}, #{ab_method}, #{ab_memo})
  </insert>
  
  <!-- ctno로 카테고리 이름 뽑기 -->
    <select id="toCate" resultType="AbookVO">
  	select ct_top, ct_bottom
	from category
	where ctno=#{ctno}
  </select>
  
  
 	<!-- //////////////////// MJ //////////////////// -->
	<!-- 해당월 예산 조회 -->
	<sql id="wh1">
		from plan
		where mno=#{mno} 
		and p_month=#{p_month}
	</sql>
	
	<!-- 상위 카테고리 -->
	<select id="getctTop" resultType="String">
		select ct_top
		from category
		where ct_inout=1 and ct_lev=0 and ctno != 12;
	</select>
	
	<!-- 1. 예산 유무 -->
	<select id="chkBud" resultType="int">
		select count(pno)
		<include refid="wh1"/>
	</select>
	 
	<!-- 2. 예산 조회 -->
	<select id="getBud" resultType="map">
		select ct.ct_top ct_top, p_amount, pno
		from plan p 
		inner join category ct 
		on p.ctno=ct.ctno
		where mno=#{mno} 
		and p_month=#{p_month}
		group by ct.ct_top;
	</select>
	
	<!-- 3. 예산 설정 -->
	<insert id="setBud" parameterType="map">
		insert into plan (mno, p_month, p_amount, ctno)
		values
		<foreach item="i" collection="insertList" separator=",">
			(#{i.mno}, #{i.p_month}, #{i.p_amount}, #{i.ctno})
		</foreach>
	</insert>
	
	<!-- 4. 예산 수정 -->
	<update id="updBud">
		update plan set 
		p_amount=#{p_amount} 
		where pno=#{pno}
	</update>
	
	<!-- 5. 예산 삭제 -->
	<delete id="delBud">
		delete
		<include refid="wh1"/>
	</delete>
	
 	<!-- 6. 총예산  조회-->
	<select id="totalBud" resultType="Integer">
		select sum(p_amount) 
		<include refid="wh1"/>
	</select>
	
	<!-- 달력 -->
	<sql id="cal1">
		select date_format(ab.ab_date, '%Y-%m-%d') date, sum(ab.ab_amount) sum, 
			case 
				when ab_inout='1' then 'out'
				when ab_inout='2' then 'in'
			end as sort
		from account_book ab
		where ab.mno=#{mno}	
	</sql>
	
	<sql id="cal2">
		and ab.ab_date between last_day(now() - interval #{mm}+1 month) + interval 1 day 
			and last_day(now() - interval #{mm} month)
		group by date, ab_inout 
		order by date;	
	</sql>
	
	<!-- 전체 -->
	<select id="calAll" resultType="map">
		<include refid="cal1"/>
		<include refid="cal2"/>
	</select>
	
	<!-- 수입, 지출 -->
	<select id="calInout" resultType="map">
		<include refid="cal1"/>
		and ab.ab_inout=#{inout}
		<include refid="cal2"/>
	</select>

	<!-- 가계부 유무 -->
	<select id="chkAb" resultType="int">
		select count(abno)
		from account_book
		where mno=#{mno} and 
		ab_date between last_day(now() - interval #{mm}+1 month) + interval 1 day 
		and last_day(now() - interval #{mm} month);
	</select>
		
  </mapper>